version: "3.7"

networks:
  kafka-net:
    name: kafka-net
    driver: bridge

services:
  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "2181:2181"

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.7.0
    container_name: kafka-exporter
    command: [ "--kafka.server=kafka:29092" ]
    ports:
      - '9308:9308'
    networks:
      - kafka-net
    depends_on:
      - kafka
      - payment-service

  db:
    container_name: postgres
    image: postgres:14.3-alpine
    networks:
      - kafka-net
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=12345
    ports:
      - '5432:5432'
    volumes:
      - ./create-db.sql:/docker-entrypoint-initdb.d/create_database.sql

  mongodb:
    container_name: mongodb
    image: mongo:7.0
    networks:
      - kafka-net
    ports:
      - '27017:27017'

  eureka-server:
    image: eureka-server:1.0.0
    networks:
      - kafka-net
    ports:
      - 8761:8761

  passenger-service:
    image: passenger-service:1.0.0
    ports:
      - 8082:8082
    networks:
      - kafka-net
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/passengerdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=12345
    depends_on:
      - db
      - eureka-server
      - kafka

  driver-service:
    image: driver-service:1.0.0
    ports:
      - 8085:8085
    networks:
      - kafka-net
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/driverdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=12345
    depends_on:
      - db
      - eureka-server
      - kafka

  rides-service:
    image: rides-service:1.0.0
    ports:
      - 8081:8081
    networks:
      - kafka-net
    links:
      - mongodb
    depends_on:
      - mongodb
      - eureka-server
      - kafka

  payment-service:
    image: payment-service:1.0.0
    ports:
      - 8084:8084
    networks:
      - kafka-net
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/paymentdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=12345
    depends_on:
      - db
      - eureka-server
      - kafka

  rating-service:
    image: rating-service:1.0.0
    ports:
      - 8083:8083
    networks:
      - kafka-net
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/ratingdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=12345
    depends_on:
      - db
      - eureka-server
      - kafka

  api-gateway:
    image: api-gateway:1.0.0
    ports:
      - 8765:8765
    networks:
      - kafka-net
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    depends_on:
      - eureka-server

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    networks:
      - kafka-net
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:10.1.5
    container_name: grafana
    networks:
      - kafka-net
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus

  elasticsearch:
    image: elasticsearch:8.12.0
    container_name: elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - kafka-net

  kibana:
    image: kibana:8.12.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    networks:
      - kafka-net

  logstash:
    image: logstash:8.12.0
    container_name: logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - kafka-net
    depends_on:
      - elasticsearch

  zipkin:
    image: openzipkin/zipkin:2.27
    container_name: zipkin
    networks:
      - kafka-net
    ports:
      - '9411:9411'

  keycloak:
    image: quay.io/keycloak/keycloak:18.0.0
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: db
      KC_DB_URL_DATABASE: keycloak
      KC_DB_PASSWORD: 12345
      KC_DB_USERNAME: postgres
      KC_DB_SCHEMA: public
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    networks:
      - kafka-net
    command: start-dev
    depends_on:
      - db

volumes:
  elasticsearch_data:
    driver: local
